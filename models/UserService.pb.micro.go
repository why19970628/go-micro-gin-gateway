// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: UserService.proto

package Models

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserCommonService service

func NewUserCommonServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserCommonService service

type UserCommonService interface {
	GetUserList(ctx context.Context, in *UsersRequest, opts ...client.CallOption) (*UserListResponse, error)
	GetUserDetail(ctx context.Context, in *UsersRequest, opts ...client.CallOption) (*UserDetailResponse, error)
}

type userCommonService struct {
	c    client.Client
	name string
}

func NewUserCommonService(name string, c client.Client) UserCommonService {
	return &userCommonService{
		c:    c,
		name: name,
	}
}

func (c *userCommonService) GetUserList(ctx context.Context, in *UsersRequest, opts ...client.CallOption) (*UserListResponse, error) {
	req := c.c.NewRequest(c.name, "UserCommonService.GetUserList", in)
	out := new(UserListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCommonService) GetUserDetail(ctx context.Context, in *UsersRequest, opts ...client.CallOption) (*UserDetailResponse, error) {
	req := c.c.NewRequest(c.name, "UserCommonService.GetUserDetail", in)
	out := new(UserDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserCommonService service

type UserCommonServiceHandler interface {
	GetUserList(context.Context, *UsersRequest, *UserListResponse) error
	GetUserDetail(context.Context, *UsersRequest, *UserDetailResponse) error
}

func RegisterUserCommonServiceHandler(s server.Server, hdlr UserCommonServiceHandler, opts ...server.HandlerOption) error {
	type userCommonService interface {
		GetUserList(ctx context.Context, in *UsersRequest, out *UserListResponse) error
		GetUserDetail(ctx context.Context, in *UsersRequest, out *UserDetailResponse) error
	}
	type UserCommonService struct {
		userCommonService
	}
	h := &userCommonServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserCommonService{h}, opts...))
}

type userCommonServiceHandler struct {
	UserCommonServiceHandler
}

func (h *userCommonServiceHandler) GetUserList(ctx context.Context, in *UsersRequest, out *UserListResponse) error {
	return h.UserCommonServiceHandler.GetUserList(ctx, in, out)
}

func (h *userCommonServiceHandler) GetUserDetail(ctx context.Context, in *UsersRequest, out *UserDetailResponse) error {
	return h.UserCommonServiceHandler.GetUserDetail(ctx, in, out)
}
